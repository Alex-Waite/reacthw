{"version":3,"sources":["logo.svg","utils/API.js","components/Jumbotron.js","components/UserRow.js","components/Table.js","components/MainContain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetEmployees","axios","get","Jumbotron","className","UserRow","React","Component","Table","MainContain","state","Employees","CreateEmployees","then","results","setState","data","console","log","catch","error","this","map","picture","name","cell","location","id","image","thumbnail","contact","address","key","value","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,kKCM5BC,MAJf,WACI,OAAOC,IAAMC,IAAI,0CCQNC,MATf,WACI,OACJ,yBAAKC,UAAU,aACb,wBAAIA,UAAU,+BAAd,sBACA,wBAAIA,UAAU,SACd,uBAAGA,UAAU,0BAAb,sFCUaC,E,uKAbP,OACI,yBAAKD,UAAU,OACX,yBAAKA,UAAU,YAAW,qCAC1B,yBAAKA,UAAU,YAAW,qCAC1B,yBAAKA,UAAU,YAAW,qCAC1B,yBAAKA,UAAU,YAAW,qCAC1B,yBAAKA,UAAU,YAAW,qCAC1B,yBAAKA,UAAU,YAAW,0C,GATpBE,IAAMC,WCiCbC,MAhCf,WACI,OAUA,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,YAAW,4BAAI,yCAC9B,yBAAKA,UAAU,YAAW,4BAAI,2CAC9B,yBAAKA,UAAU,YAAW,4BAAI,0CAC9B,yBAAKA,UAAU,YAAW,4BAAI,2CAC9B,yBAAKA,UAAU,YAAW,4BAAI,2CAC9B,yBAAKA,UAAU,YAAW,4BAAI,2CCwBrBK,E,4MAhCXC,MAAQ,CACJC,UAAW,I,EAIfC,gBAAkB,WACdZ,IAAea,MAAK,SAAAC,GAChB,EAAKC,SAAS,CAACJ,UAAWG,EAAQE,KAAKF,UACvCG,QAAQC,IAAI,kCACZD,QAAQC,IAAI,EAAKR,MAAMC,cACxBQ,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,O,kEAKhCC,KAAKT,oB,+BAKT,OACA,yBAAKR,UAAU,eACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACf,kBAAC,EAAD,MACCiB,KAAKX,MAAMC,UAAUW,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,GAAlC,OACV,kBAAC,EAAD,CAASC,MAAOL,EAAQM,UAAWL,KAAMA,EAAMM,QAASL,EAAMM,QAASL,EAAUM,IAAKL,EAAGM,iB,GA3BvF3B,IAAMC,WCGjB2B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM6B,c","file":"static/js/main.034a28c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nfunction GetEmployees () {\r\n    return axios.get(\"https://randomuser.me/api/?results=15\")\r\n}\r\n\r\nexport default GetEmployees","import React from \"react\";\r\n\r\nfunction Jumbotron () {\r\n    return (\r\n<div className=\"jumbotron\">\r\n  <h1 className=\"display-4 CenteredJumbotron\">Employee Directory</h1>\r\n  <hr className=\"my-4\" />\r\n  <p className=\"lead CenteredJumbotron\">Use this simple React App to view and sort a list of employees from a Directory!</p>\r\n</div>\r\n    )}\r\n\r\nexport default Jumbotron","import React from \"react\";\r\n\r\nclass UserRow extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-2\"><h5>hmmm</h5></div>\r\n                <div className=\"col-md-2\"><h5>hmmm</h5></div>\r\n                <div className=\"col-md-2\"><h5>hmmm</h5></div>\r\n                <div className=\"col-md-2\"><h5>hmmm</h5></div>\r\n                <div className=\"col-md-2\"><h5>hmmm</h5></div>\r\n                <div className=\"col-md-2\"><h5>hmmm</h5></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserRow;\r\n\r\n            // <div className=\"row m-5\">\r\n            //     <div className=\"col-md-2\"><h1>Hello</h1></div>\r\n            //     <div className=\"col-md-2\"><h1>Hello</h1></div>\r\n            //     <div className=\"col-md-2\"><h1>Hello</h1></div>\r\n            //     <div className=\"col-md-2\"><h1>Hello</h1></div>\r\n            //     <div className=\"col-md-2\"><h1>Hello</h1></div>\r\n            //     <div className=\"col-md-2\"><h1>Hello</h1></div>\r\n            // </div>\r\n","import React from \"react\";\r\nimport UserRow from \"./UserRow\";\r\n\r\nfunction Table () {\r\n    return (\r\n      // <div className=\"row m-5\">\r\n      //   <div className=\"col-md-2\"><h4 className=\"Bold\">Photo</h4></div>\r\n      //   <div className=\"col-md-2\"><h4 className=\"Bold\">First-Name</h4></div>\r\n      //   <div className=\"col-md-2\"><h4 className=\"Bold\">Last-Name</h4></div>\r\n      //   <div className=\"col-md-2\"><h4 className=\"Bold\">Email</h4></div>\r\n      //   <div className=\"col-md-2\"><h4 className=\"Bold\">Phone</h4></div>\r\n      //   <div className=\"col-md-2\"><h4 className=\"Bold\">Age</h4></div>\r\n      // </div>\r\n \r\n    <div className=\"row\">\r\n      <div className=\"col-md-2\"><h5><strong>Pic</strong></h5></div>\r\n      <div className=\"col-md-2\"><h5><strong>First</strong></h5></div>\r\n      <div className=\"col-md-2\"><h5><strong>Last</strong></h5></div>\r\n      <div className=\"col-md-2\"><h5><strong>Email</strong></h5></div>\r\n      <div className=\"col-md-2\"><h5><strong>Phone</strong></h5></div>\r\n      <div className=\"col-md-2\"><h5><strong>Age</strong></h5></div>\r\n    </div>\r\n  \r\n  /* <tbody>\r\n    <tr>\r\n      <td>Alex</td>\r\n      <td>Waite</td>\r\n      <td>AlexWaite@hmm.com</td>\r\n      <td>123-123-1234</td>\r\n    </tr>\r\n  </tbody> */\r\n\r\n    )\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\n\r\nimport GetEmployees from \"../utils/API\"\r\n\r\nimport Jumbotron from \"./Jumbotron\"\r\nimport Table from \"./Table\"\r\nimport UserRow from \"./UserRow\";\r\n\r\n\r\n\r\n\r\nclass MainContain extends React.Component {\r\n    state = { \r\n        Employees: []\r\n    }\r\n    \r\n    // Use the randomuser.me API call to generate employees and add them to an array in state object, catch at end to see if theres an error\r\n    CreateEmployees = () => {\r\n        GetEmployees().then(results => {\r\n            this.setState({Employees: results.data.results})\r\n            console.log(\"Employees Succesful generation\")\r\n            console.log(this.state.Employees)\r\n        }).catch((error) => console.log(error))\r\n    }\r\n    \r\n    // Run on page first load \"component first Print => do this\"\r\n    componentDidMount() {\r\n        this.CreateEmployees()\r\n    } \r\n    \r\n\r\n    render() {\r\n    return (\r\n    <div className=\"MainContain\">\r\n        <Jumbotron />\r\n        <div className=\"container\">\r\n        <Table />\r\n        {this.state.Employees.map(({ picture, name, cell, location, id }) => (\r\n                        <UserRow image={picture.thumbnail} name={name} contact={cell} address={location} key={id.value} />\r\n                    ))}\r\n                    </div>\r\n    </div>\r\n    )}\r\n}\r\nexport default MainContain","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport MainContain from './components/MainContain';\n\nfunction App() {\n  return (\n    <div>\n      <MainContain />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}